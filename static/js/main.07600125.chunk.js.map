{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home98","className","href","open","Home","basename","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAaMA,G,MAAS,WACX,OACI,yBAAKC,UAAU,oBAEX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBAAf,gDACA,yBAAKA,UAAU,wBAGnB,yBAAKA,UAAU,eACX,uBAAGA,UAAU,kBAAb,8IAEA,wBAAIA,UAAU,aACV,wBAAIA,UAAU,0BAAd,sBAEA,uBAAGC,KAAK,aAAY,4BAAQD,UAAU,8BAAlB,8BACpB,4BACI,6BAASE,MAAI,GACT,iDACA,4BAEI,uBAAGD,KAAK,SAAR,IAAiB,6BAAK,4BAAQD,UAAU,sBAAlB,aACtB,uBAAGC,KAAK,gDAA+C,6BAAK,4BAAQD,UAAU,sBAAlB,SAC5D,uBAAGC,KAAK,oCAAR,IAA4C,6BAA5C,IAAkD,4BAAQD,UAAU,sBAAlB,gCAClD,uBAAGC,KAAK,SAAR,IAAiB,6BAAjB,IAAuB,4BAAQD,UAAU,sBAAlB,8CAiD5CG,EArCF,kBACT,kBAAC,IAAD,CAAQC,SAAS,KACb,6BACI,kBAAC,EAAD,SCzCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAACC,EAAD,OAEJC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07600125.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport \"./container/Home98.css\"\r\n\r\n/* Credit for the majority of the CSS goes to Jordan Scales!!!!\r\n        https://jdan.github.io/98.css/?ref=blogduwebdesign.com\r\n        It is distributed under the MIT Licence\r\n        I did some more work, slightly for browser compatibility, and so that the scrollbars are kept to the default.\r\n        That work was on import \"../98.css/style.css\".\r\n        If you wanna see exactly what I did just compare the changes from the OG file to my own.\r\n */\r\n\r\n\r\nconst Home98 = () => {\r\n    return (\r\n        <div className=\"Home98-Container\">\r\n            {/*the window class is unique to 98.css*/}\r\n            <div className=\"window\">\r\n                <div className=\"title-bar\">\r\n                    <div className=\"title-bar-text\">Welcome to the History of Computing website!</div>\r\n                    <div className=\"title-bar-controls\">\r\n                    </div>\r\n                </div>\r\n                <div className=\"window-body\">\r\n                    <p className=\"Home98-content\">Don't worry, the site wont always look like this. But it's a good way to see\r\n                        how far technology has come. This was how Windows 98 looked! </p>\r\n                    <ul className=\"tree-view\">\r\n                        <li className=\"Home98-TableofContents\">Table of Contents:</li>\r\n                        {/*the button class is unique to 98.css*/}\r\n                        <a href=\"/timeline\"><button className=\"Home98-timelineLink button\">The Timeline (CLICK HERE)</button></a>\r\n                        <li>\r\n                            <details open>\r\n                                <summary>Other things</summary>\r\n                                <ul>\r\n                                    {/*the window class is unique to 98.css*/}\r\n                                    <a href=\"/team\"> <li/><button className=\"Home98-link button\">Credits </button></a>\r\n                                    <a href=\"https://ecommons.luc.edu/history_facpubs/42/\"><li/><button className=\"Home98-link button\" >Book</button></a>\r\n                                    <a href=\"https://ssl.cs.luc.edu/team.html\"> <li/> <button className=\"Home98-link button\" >Software Systems Laboratory</button></a>\r\n                                    <a href=\"/home\"> <li/> <button className=\"Home98-link button\" >Click here for a normal homepage</button></a>\r\n                                </ul>\r\n                            </details>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Home = () => (\r\n    <Router basename='/'>\r\n        <div>\r\n            <Home98/>\r\n        </div>\r\n    </Router>\r\n);\r\n// const Topics = ({ match }) => (\r\n//     <div>\r\n//         <h2>Topics</h2>\r\n//         <ul>\r\n//             <li>\r\n//                 <Link to={`${match.url}/rendering`}>Rendering with React</Link>\r\n//             </li>\r\n//             <li>\r\n//                 <Link to={`${match.url}/components`}>Components</Link>\r\n//             </li>\r\n//             <li>\r\n//                 <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\r\n//             </li>\r\n//         </ul>\r\n//\r\n//         <Route path={`${match.url}/:topicId`} component={Topic} />\r\n//         <Route\r\n//             exact\r\n//             path={match.url}\r\n//             render={() => <h3>Please select a topic.</h3>}\r\n//         />\r\n//     </div>\r\n// );\r\n//\r\n// const Topic = ({ match }) => (\r\n//     <div>\r\n//         <h3>{match.params.topicId}</h3>\r\n//     </div>\r\n// );\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n//Wrapped in browser router so it can be a single page app\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}